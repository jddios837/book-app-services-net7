@page "/orders-bar-chart"
@using System.Globalization
@inject IHttpClientFactory httpClientFactory

<RadzenCheckBox @bind-Value="@showDataLabels"
                Name="dataLabels"></RadzenCheckBox>

<RadzenLabel Text="Show Data Labels" For="dataLabels" Style="margin-left: 8px; vertical-align: middle" />

<RadzenChart>
    <RadzenBarSeries Data="@revenue" CategoryProperty="Country"
                     LineType="LineType.Dashed" ValueProperty="Revenue">
        <RadzenSeriesDataLabels Visible="@showDataLabels" />
        <RadzenValueAxis Formatter="@FormatAsUSD">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Revenue in USD" />
        </RadzenValueAxis>
        <RadzenBarOptions Radius="5" />
        <RadzenLegend Visible="false" />
    </RadzenBarSeries>
</RadzenChart>

@code {
    bool showDataLabels = false;

    class DataItem
    {
        public string? Country { get; set; }
        public decimal Revenue { get; set; }
    }
    
    private string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.GetCultureInfo("en-US"));
    }
    
    private DataItem[]? revenue;

    protected override async Task OnParametersSetAsync()
    {
        Order[]? ordersArray = null;

        JsonSerializerOptions jsonOptions = new()
        {
            ReferenceHandler = ReferenceHandler.Preserve,
            PropertyNameCaseInsensitive = true
        };
        
        HttpClient httpClient = httpClientFactory.CreateClient("Northwind.BlazorLibraries.ServiceAPI");
        
        string path = "api/orders";

        try
        {
            ordersArray = await httpClient.GetFromJsonAsync<Order[]?>(path, jsonOptions);
            revenue = ordersArray?
                .GroupBy(order => order.ShipCountry)
                .Select(group => new DataItem
                {
                    Country = group.Key,
                    Revenue = group.Sum(order => order.OrderDetails.Sum(detail => detail.Quantity * detail.UnitPrice))
                })
                .OrderByDescending(dataitem => dataitem.Revenue)
                .ToArray();
        }
        catch (Exception e)
        {
            Console.WriteLine($"{e.GetType()} : {e.Message}");
        }
    }

}